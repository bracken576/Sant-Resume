
```{python}
import SimpleITK as sitk
import dicom2nifti
import nibabel as nib
import nilearn as nil
import scipy.ndimage as ndi
import matplotlib.pyplot as plt
import os
```


```{python}
brain_vol = nib.load('6343R_3Dhigh.nii')
brain_vol_data = brain_vol.get_fdata()
fig_rows = 4
fig_cols = 4
n_subplots = fig_rows * fig_cols
n_slice = brain_vol_data.shape[0]
step_size = n_slice // n_subplots
plot_range = n_subplots * step_size
start_stop = int((n_slice - plot_range) / 2)

fig, axs = plt.subplots(fig_rows, fig_cols, figsize=[10, 10])

for idx, img in enumerate(range(start_stop, plot_range, step_size)):
    axs.flat[idx].imshow(ndi.rotate(brain_vol_data[img, :, :], 90), cmap='gray')
    axs.flat[idx].axis('off')
        
plt.tight_layout()
plt.show()
```



```{python}
import numpy as np
import nibabel as nib
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt

# Step 1: Load NIfTI file
file_path = "6343R_3Dhigh.nii"
nifti_data = nib.load(file_path)
image_data = nifti_data.get_fdata()

# Step 2: Preprocess the data
# Normalize voxel intensities
image_data_normalized = (image_data - np.min(image_data)) / (np.max(image_data) - np.min(image_data))

# Flatten the 3D image into a 2D array: [num_voxels, num_features]
# Here, features are voxel intensities
voxel_values = image_data_normalized.flatten()[:, np.newaxis]

# Step 3: Apply K-Means clustering
num_clusters = 3  # Number of clusters
kmeans = KMeans(n_clusters=num_clusters, random_state=42)
labels = kmeans.fit_predict(voxel_values)

# Reshape the labels back to the original 3D shape
clustered_image = labels.reshape(image_data.shape)

# Step 4: Visualize the result
slice_idx = image_data.shape[2] // 2  # Choose a middle slice for visualization
plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
plt.title("Original Slice")
plt.imshow(image_data[:, :, slice_idx], cmap="gray")
plt.subplot(1, 2, 2)
plt.title("Clustered Slice")
plt.imshow(clustered_image[:, :, slice_idx], cmap="viridis")
plt.show()

```
